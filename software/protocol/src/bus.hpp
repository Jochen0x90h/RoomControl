#pragma once

#include "MessageReader.hpp"
#include "MessageWriter.hpp"
#include <enum.hpp>
#include <cstdint>


namespace bus {

extern uint8_t const defaultKey[16];
extern AesKey const defaultAesKey;



enum class EndpointType2 : uint16_t {
	// direction
	IN = 2 << 14,
	OUT = 1 << 14,
	DIRECTION_MASK = 3 << 14,

	// explicit command (set, increase, decrease)
	CMD = 1 << 13,

	// type
	TYPE_MASK = 0x1fff,
	UNKNOWN = 0,
	CATEGORY = 15 << 9,
	// switch category (byte)
	SWITCH = 1 << 9,
	SWITCH_IN = SWITCH | IN,
	SWITCH_OUT = SWITCH | OUT,
	SWITCH_CMD_IN = SWITCH_IN | CMD,
	SWITCH_CMD_OUT = SWITCH_OUT | CMD,
	SWITCH_CATEGORY = 63 << 7,
	// generic binary switch (0: off, 1: on, 2: toggle command)
	SWITCH_BINARY = SWITCH | 1 << 7,
	SWITCH_BINARY_IN = SWITCH_BINARY | IN,
	SWITCH_BINARY_OUT = SWITCH_BINARY | OUT,
	SWITCH_BINARY_CMD_IN = SWITCH_BINARY_IN | CMD,
	SWITCH_BINARY_CMD_OUT = SWITCH_BINARY_OUT | CMD,
	SWITCH_BINARY_CATEGORY = 1023 << 3,
	// one state is stable, the other is transient
	SWITCH_BINARY_ONESHOT = SWITCH_BINARY | 1 << 3,
	SWITCH_BINARY_ONESHOT_IN = SWITCH_BINARY_ONESHOT | IN,
	SWITCH_BINARY_ONESHOT_OUT = SWITCH_BINARY_ONESHOT | OUT,
	SWITCH_BINARY_ONESHOT_CATEGORY = 4095 << 1,
	// button returns to inactive state when released (0: release, 1: press)
	SWITCH_BINARY_ONESHOT_BUTTON = SWITCH_BINARY_ONESHOT | 1 << 1,
	SWITCH_BINARY_ONESHOT_BUTTON_IN = SWITCH_BINARY_ONESHOT_BUTTON | IN,
	SWITCH_BINARY_ONESHOT_BUTTON_OUT = SWITCH_BINARY_ONESHOT_BUTTON | OUT,
	// activation of alarm (0: deactivate, 1: activate)
	SWITCH_BINARY_ONESHOT_ALARM = SWITCH_BINARY_ONESHOT | 2 << 1,
	SWITCH_BINARY_ONESHOT_ALARM_IN = SWITCH_BINARY_ONESHOT_ALARM | IN,
	SWITCH_BINARY_ONESHOT_ALARM_OUT = SWITCH_BINARY_ONESHOT_ALARM | OUT,
	// mechanical switch such as wall switch (0: off, 1: on)
	SWITCH_BINARY_SWITCH = SWITCH_BINARY | 2 << 3,
	SWITCH_BINARY_SWITCH_IN = SWITCH_BINARY_SWITCH | IN,
	SWITCH_BINARY_SWITCH_OUT = SWITCH_BINARY_SWITCH | OUT,
	// power on/off (0: off, 1: on, 2: toggle command)
	SWITCH_BINARY_ON_OFF = SWITCH_BINARY | 3 << 3,
	SWITCH_BINARY_ON_OFF_IN = SWITCH_BINARY_ON_OFF | IN,
	SWITCH_BINARY_ON_OFF_OUT = SWITCH_BINARY_ON_OFF | OUT,
	SWITCH_BINARY_ON_OFF_CMD_IN = SWITCH_BINARY_ON_OFF_IN | CMD,
	SWITCH_BINARY_ON_OFF_CMD_OUT = SWITCH_BINARY_ON_OFF_OUT | CMD,
	// start/stop (0: stop, 1: start, 2: toggle command)
	SWITCH_BINARY_START_STOP = SWITCH_BINARY | 4 << 3,
	SWITCH_BINARY_START_STOP_IN = SWITCH_BINARY_START_STOP | IN,
	SWITCH_BINARY_START_STOP_OUT = SWITCH_BINARY_START_STOP | OUT,
	SWITCH_BINARY_START_STOP_CMD_IN = SWITCH_BINARY_START_STOP_IN | CMD,
	SWITCH_BINARY_START_STOP_CMD_OUT = SWITCH_BINARY_START_STOP_OUT | CMD,
	// valve
	SWITCH_BINARY_VALVE = SWITCH_BINARY | 5 << 3,
	SWITCH_BINARY_VALVE_IN = SWITCH_BINARY_VALVE | IN,
	SWITCH_BINARY_VALVE_OUT = SWITCH_BINARY_VALVE | OUT,
	SWITCH_BINARY_VALVE_CMD_IN = SWITCH_BINARY_VALVE_IN | CMD,
	SWITCH_BINARY_VALVE_CMD_OUT = SWITCH_BINARY_VALVE_OUT | CMD,
	SWITCH_BINARY_VALVE_CATEGORY = 4095 << 1,
	// normally open valve (0: open, 1: close)
	SWITCH_BINARY_VALVE_NO = SWITCH_BINARY_VALVE | 1 << 1,
	SWITCH_BINARY_VALVE_NO_IN = SWITCH_BINARY_VALVE_NO | IN,
	SWITCH_BINARY_VALVE_NO_OUT = SWITCH_BINARY_VALVE_NO | OUT,
	SWITCH_BINARY_VALVE_NO_CMD_IN = SWITCH_BINARY_VALVE_NO_IN | CMD,
	SWITCH_BINARY_VALVE_NO_CMD_OUT = SWITCH_BINARY_VALVE_NO_OUT | CMD,
	// normally open valve (0: close, 1: open)
	SWITCH_BINARY_VALVE_NC = SWITCH_BINARY_VALVE | 2 << 1,
	SWITCH_BINARY_VALVE_NC_IN = SWITCH_BINARY_VALVE_NC | IN,
	SWITCH_BINARY_VALVE_NC_OUT = SWITCH_BINARY_VALVE_NC | OUT,
	SWITCH_BINARY_VALVE_NC_CMD_IN = SWITCH_BINARY_VALVE_NC_IN | CMD,
	SWITCH_BINARY_VALVE_NC_CMD_OUT = SWITCH_BINARY_VALVE_NC_OUT | CMD,
	// aperture of gate or blind
	SWITCH_BINARY_APERTURE = SWITCH_BINARY | 6 << 3,
	SWITCH_BINARY_APERTURE_IN = SWITCH_BINARY_APERTURE | IN,
	SWITCH_BINARY_APERTURE_OUT = SWITCH_BINARY_APERTURE | OUT,
	SWITCH_BINARY_APERTURE_CMD_IN = SWITCH_BINARY_APERTURE_IN | CMD,
	SWITCH_BINARY_APERTURE_CMD_OUT = SWITCH_BINARY_APERTURE_OUT | CMD,
	SWITCH_BINARY_APERTURE_CATEGORY = 4095 << 1,
	// door (0: open, 1: close)
	SWITCH_BINARY_APERTURE_DOOR = SWITCH_BINARY_APERTURE | 1 << 1,
	SWITCH_BINARY_APERTURE_DOOR_IN = SWITCH_BINARY_APERTURE_DOOR | IN,
	SWITCH_BINARY_APERTURE_DOOR_OUT = SWITCH_BINARY_APERTURE_DOOR | OUT,
	SWITCH_BINARY_APERTURE_DOOR_CMD_IN = SWITCH_BINARY_APERTURE_DOOR_IN | CMD,
	SWITCH_BINARY_APERTURE_DOOR_CMD_OUT = SWITCH_BINARY_APERTURE_DOOR_OUT | CMD,
	// window (0: open, 1: close)
	SWITCH_BINARY_APERTURE_WINDOW = SWITCH_BINARY_APERTURE | 2 << 1,
	SWITCH_BINARY_APERTURE_WINDOW_IN = SWITCH_BINARY_APERTURE_WINDOW | IN,
	SWITCH_BINARY_APERTURE_WINDOW_OUT = SWITCH_BINARY_APERTURE_WINDOW | OUT,
	SWITCH_BINARY_APERTURE_WINDOW_CMD_IN = SWITCH_BINARY_APERTURE_WINDOW_IN | CMD,
	SWITCH_BINARY_APERTURE_WINDOW_CMD_OUT = SWITCH_BINARY_APERTURE_WINDOW_OUT | CMD,
	// occupancy measured by e.g. PIR sensor (0: unoccupied, 1: occupied)
	SWITCH_BINARY_OCCUPANCY = SWITCH_BINARY | 7 << 3,
	SWITCH_BINARY_OCCUPANCY_IN = SWITCH_BINARY_OCCUPANCY | IN,
	SWITCH_BINARY_OCCUPANCY_OUT = SWITCH_BINARY_OCCUPANCY | OUT,
	// closing of blind/lock enabled (0: disabled, 1: enabled)
	SWITCH_BINARY_ENABLE_CLOSE = SWITCH_BINARY | 8 << 3,
	SWITCH_BINARY_ENABLE_CLOSE_IN = SWITCH_BINARY_ENABLE_CLOSE | IN,
	SWITCH_BINARY_ENABLE_CLOSE_OUT = SWITCH_BINARY_ENABLE_CLOSE | OUT,
	// ternary state
	SWITCH_TERNARY = SWITCH | 2 << 7,
	SWITCH_TERNARY_IN = SWITCH_TERNARY | IN,
	SWITCH_TERNARY_OUT = SWITCH_TERNARY | OUT,
	SWITCH_TERNARY_CATEGORY = 1023 << 3,
	// one state is stable, all others are transient
	SWITCH_TERNARY_ONESHOT = SWITCH_TERNARY | 1 << 3,
	SWITCH_TERNARY_ONESHOT_IN = SWITCH_TERNARY_ONESHOT | IN,
	SWITCH_TERNARY_ONESHOT_OUT = SWITCH_TERNARY_ONESHOT | OUT,
	SWITCH_TERNARY_ONESHOT_CATEGORY = 4095 << 1,
	// rocker returns to inactive state when released (0: release, 1: up, 2: down)
	SWITCH_TERNARY_ONESHOT_ROCKER = SWITCH_TERNARY_ONESHOT | 1 << 1,
	SWITCH_TERNARY_ONESHOT_ROCKER_IN = SWITCH_TERNARY_ONESHOT_ROCKER | IN,
	SWITCH_TERNARY_ONESHOT_ROCKER_OUT = SWITCH_TERNARY_ONESHOT_ROCKER | OUT,
	// mechanical switch with 3 states (0: off, 1: on1, 2: on2)
	SWITCH_TERNARY_SWITCH = SWITCH_TERNARY | 2 << 3,
	SWITCH_TERNARY_SWITCH_IN = SWITCH_TERNARY_SWITCH | IN,
	SWITCH_TERNARY_SWITCH_OUT = SWITCH_TERNARY_SWITCH | OUT,
	// open/close/stop of blind etc. (0: stop, 1: open, 2: close)
	SWITCH_TERNARY_OPEN_CLOSE = SWITCH_TERNARY | 3 << 3,
	SWITCH_TERNARY_OPEN_CLOSE_IN = SWITCH_TERNARY_OPEN_CLOSE | IN,
	SWITCH_TERNARY_OPEN_CLOSE_OUT = SWITCH_TERNARY_OPEN_CLOSE | OUT,
	// multi-state category (int)
	MULTISTATE = 2 << 9,
	MULTISTATE_IN = MULTISTATE | IN,
	MULTISTATE_OUT = MULTISTATE | OUT,
	MULTISTATE_CMD_IN = MULTISTATE_IN | CMD,
	MULTISTATE_CMD_OUT = MULTISTATE_OUT | CMD,
	MULTISTATE_CATEGORY = 63 << 7,
	// thermostat mode (0: heat, 1: cool, 2: auto)
	MULTISTATE_THERMOSTAT_MODE = MULTISTATE | 1 << 7,
	MULTISTATE_THERMOSTAT_MODE_IN = MULTISTATE_THERMOSTAT_MODE | IN,
	MULTISTATE_THERMOSTAT_MODE_OUT = MULTISTATE_THERMOSTAT_MODE | OUT,
	// level category (float, range 0-1, displayed as 0-100%)
	LEVEL = 3 << 9,
	LEVEL_IN = LEVEL | IN,
	LEVEL_OUT = LEVEL | OUT,
	LEVEL_CMD_IN = LEVEL_IN | CMD,
	LEVEL_CMD_OUT = LEVEL_OUT | CMD,
	LEVEL_CATEGORY = 127 << 6,
	// aperture of gate or blind
	LEVEL_APERTURE = LEVEL | 1 << 6,
	LEVEL_APERTURE_IN = LEVEL_APERTURE | IN,
	LEVEL_APERTURE_OUT = LEVEL_APERTURE | OUT,
	LEVEL_APERTURE_CMD_IN = LEVEL_APERTURE_IN | CMD,
	LEVEL_APERTURE_CMD_OUT = LEVEL_APERTURE_OUT | CMD,
	LEVEL_APERTURE_CATEGORY = 1023 << 3,
	// gate position
	LEVEL_APERTURE_GATE = LEVEL_APERTURE | 1 << 3,
	LEVEL_APERTURE_GATE_IN = LEVEL_APERTURE_GATE | IN,
	LEVEL_APERTURE_GATE_OUT = LEVEL_APERTURE_GATE | OUT,
	LEVEL_APERTURE_GATE_CMD_IN = LEVEL_APERTURE_GATE_IN | CMD,
	LEVEL_APERTURE_GATE_CMD_OUT = LEVEL_APERTURE_GATE_OUT | CMD,
	// blind position
	LEVEL_APERTURE_BLIND = LEVEL_APERTURE | 2 << 3,
	LEVEL_APERTURE_BLIND_IN = LEVEL_APERTURE_BLIND | IN,
	LEVEL_APERTURE_BLIND_OUT = LEVEL_APERTURE_BLIND | OUT,
	LEVEL_APERTURE_BLIND_CMD_IN = LEVEL_APERTURE_BLIND_IN | CMD,
	LEVEL_APERTURE_BLIND_CMD_OUT = LEVEL_APERTURE_BLIND_OUT | CMD,
	// slat position of venetian blind
	LEVEL_APERTURE_SLAT = LEVEL_APERTURE | 3 << 3,
	LEVEL_APERTURE_SLAT_IN = LEVEL_APERTURE_SLAT | IN,
	LEVEL_APERTURE_SLAT_OUT = LEVEL_APERTURE_SLAT | OUT,
	LEVEL_APERTURE_SLAT_CMD_IN = LEVEL_APERTURE_SLAT_IN | CMD,
	LEVEL_APERTURE_SLAT_CMD_OUT = LEVEL_APERTURE_SLAT_OUT | CMD,
	// battery level
	LEVEL_BATTERY = LEVEL | 2 << 6,
	LEVEL_BATTERY_IN = LEVEL_BATTERY | IN,
	LEVEL_BATTERY_OUT = LEVEL_BATTERY | OUT,
	// water/fuel tank level
	LEVEL_TANK = LEVEL | 3 << 6,
	LEVEL_TANK_IN = LEVEL_TANK | IN,
	LEVEL_TANK_OUT = LEVEL_TANK | OUT,
	// physical quantities category (float)
	PHYSICAL = 4 << 9,
	PHYSICAL_IN = PHYSICAL | IN,
	PHYSICAL_OUT = PHYSICAL | OUT,
	PHYSICAL_CMD_IN = PHYSICAL_IN | CMD,
	PHYSICAL_CMD_OUT = PHYSICAL_OUT | CMD,
	PHYSICAL_CATEGORY = 255 << 5,
	// process temperature in Kelvin (displayed as Celsius or Fahrenheit)
	PHYSICAL_TEMPERATURE = PHYSICAL | 1 << 5,
	PHYSICAL_TEMPERATURE_IN = PHYSICAL_TEMPERATURE | IN,
	PHYSICAL_TEMPERATURE_OUT = PHYSICAL_TEMPERATURE | OUT,
	PHYSICAL_TEMPERATURE_CMD_IN = PHYSICAL_TEMPERATURE_IN | CMD,
	PHYSICAL_TEMPERATURE_CMD_OUT = PHYSICAL_TEMPERATURE_OUT | CMD,
	PHYSICAL_TEMPERATURE_CATEGORY = 1023 << 3,
	// measured temperature
	PHYSICAL_TEMPERATURE_MEASURED = PHYSICAL_TEMPERATURE | 1 << 3,
	PHYSICAL_TEMPERATURE_MEASURED_IN = PHYSICAL_TEMPERATURE_MEASURED | IN,
	PHYSICAL_TEMPERATURE_MEASURED_OUT = PHYSICAL_TEMPERATURE_MEASURED | OUT,
	PHYSICAL_TEMPERATURE_MEASURED_CATEGORY = 8191 << 0,
	// measured freezer temperature
	PHYSICAL_TEMPERATURE_MEASURED_FREEZER = PHYSICAL_TEMPERATURE_MEASURED | 1 << 0,
	PHYSICAL_TEMPERATURE_MEASURED_FREEZER_IN = PHYSICAL_TEMPERATURE_MEASURED_FREEZER | IN,
	PHYSICAL_TEMPERATURE_MEASURED_FREEZER_OUT = PHYSICAL_TEMPERATURE_MEASURED_FREEZER | OUT,
	// measured fridge temperature
	PHYSICAL_TEMPERATURE_MEASURED_FRIDGE = PHYSICAL_TEMPERATURE_MEASURED | 2 << 0,
	PHYSICAL_TEMPERATURE_MEASURED_FRIDGE_IN = PHYSICAL_TEMPERATURE_MEASURED_FRIDGE | IN,
	PHYSICAL_TEMPERATURE_MEASURED_FRIDGE_OUT = PHYSICAL_TEMPERATURE_MEASURED_FRIDGE | OUT,
	// measured outdoor temperature
	PHYSICAL_TEMPERATURE_MEASURED_OUTDOOR = PHYSICAL_TEMPERATURE_MEASURED | 3 << 0,
	PHYSICAL_TEMPERATURE_MEASURED_OUTDOOR_IN = PHYSICAL_TEMPERATURE_MEASURED_OUTDOOR | IN,
	PHYSICAL_TEMPERATURE_MEASURED_OUTDOOR_OUT = PHYSICAL_TEMPERATURE_MEASURED_OUTDOOR | OUT,
	// measured room temperature
	PHYSICAL_TEMPERATURE_MEASURED_ROOM = PHYSICAL_TEMPERATURE_MEASURED | 4 << 0,
	PHYSICAL_TEMPERATURE_MEASURED_ROOM_IN = PHYSICAL_TEMPERATURE_MEASURED_ROOM | IN,
	PHYSICAL_TEMPERATURE_MEASURED_ROOM_OUT = PHYSICAL_TEMPERATURE_MEASURED_ROOM | OUT,
	// measured oven temperature
	PHYSICAL_TEMPERATURE_MEASURED_OVEN = PHYSICAL_TEMPERATURE_MEASURED | 5 << 0,
	PHYSICAL_TEMPERATURE_MEASURED_OVEN_IN = PHYSICAL_TEMPERATURE_MEASURED_OVEN | IN,
	PHYSICAL_TEMPERATURE_MEASURED_OVEN_OUT = PHYSICAL_TEMPERATURE_MEASURED_OVEN | OUT,
	// setpoint temperature
	PHYSICAL_TEMPERATURE_SETPOINT = PHYSICAL_TEMPERATURE | 2 << 3,
	PHYSICAL_TEMPERATURE_SETPOINT_IN = PHYSICAL_TEMPERATURE_SETPOINT | IN,
	PHYSICAL_TEMPERATURE_SETPOINT_OUT = PHYSICAL_TEMPERATURE_SETPOINT | OUT,
	PHYSICAL_TEMPERATURE_SETPOINT_CMD_IN = PHYSICAL_TEMPERATURE_SETPOINT_IN | CMD,
	PHYSICAL_TEMPERATURE_SETPOINT_CMD_OUT = PHYSICAL_TEMPERATURE_SETPOINT_OUT | CMD,
	PHYSICAL_TEMPERATURE_SETPOINT_CATEGORY = 8191 << 0,
	// cooling setpoint for freezer (-30oC - 0oC)
	PHYSICAL_TEMPERATURE_SETPOINT_FREEZER = PHYSICAL_TEMPERATURE_SETPOINT | 1 << 0,
	PHYSICAL_TEMPERATURE_SETPOINT_FREEZER_IN = PHYSICAL_TEMPERATURE_SETPOINT_FREEZER | IN,
	PHYSICAL_TEMPERATURE_SETPOINT_FREEZER_OUT = PHYSICAL_TEMPERATURE_SETPOINT_FREEZER | OUT,
	PHYSICAL_TEMPERATURE_SETPOINT_FREEZER_CMD_IN = PHYSICAL_TEMPERATURE_SETPOINT_FREEZER_IN | CMD,
	PHYSICAL_TEMPERATURE_SETPOINT_FREEZER_CMD_OUT = PHYSICAL_TEMPERATURE_SETPOINT_FREEZER_OUT | CMD,
	// cooling setpoint for fridge (0oC - 20oC)
	PHYSICAL_TEMPERATURE_SETPOINT_FRIDGE = PHYSICAL_TEMPERATURE_SETPOINT | 2 << 0,
	PHYSICAL_TEMPERATURE_SETPOINT_FRIDGE_IN = PHYSICAL_TEMPERATURE_SETPOINT_FRIDGE | IN,
	PHYSICAL_TEMPERATURE_SETPOINT_FRIDGE_OUT = PHYSICAL_TEMPERATURE_SETPOINT_FRIDGE | OUT,
	PHYSICAL_TEMPERATURE_SETPOINT_FRIDGE_CMD_IN = PHYSICAL_TEMPERATURE_SETPOINT_FRIDGE_IN | CMD,
	PHYSICAL_TEMPERATURE_SETPOINT_FRIDGE_CMD_OUT = PHYSICAL_TEMPERATURE_SETPOINT_FRIDGE_OUT | CMD,
	// cooling setpoint for hvac (8oC - 30oC)
	PHYSICAL_TEMPERATURE_SETPOINT_COOLER = PHYSICAL_TEMPERATURE_SETPOINT | 3 << 0,
	PHYSICAL_TEMPERATURE_SETPOINT_COOLER_IN = PHYSICAL_TEMPERATURE_SETPOINT_COOLER | IN,
	PHYSICAL_TEMPERATURE_SETPOINT_COOLER_OUT = PHYSICAL_TEMPERATURE_SETPOINT_COOLER | OUT,
	PHYSICAL_TEMPERATURE_SETPOINT_COOLER_CMD_IN = PHYSICAL_TEMPERATURE_SETPOINT_COOLER_IN | CMD,
	PHYSICAL_TEMPERATURE_SETPOINT_COOLER_CMD_OUT = PHYSICAL_TEMPERATURE_SETPOINT_COOLER_OUT | CMD,
	// heating setpoint for hvac (8oC - 30oC)
	PHYSICAL_TEMPERATURE_SETPOINT_HEATER = PHYSICAL_TEMPERATURE_SETPOINT | 4 << 0,
	PHYSICAL_TEMPERATURE_SETPOINT_HEATER_IN = PHYSICAL_TEMPERATURE_SETPOINT_HEATER | IN,
	PHYSICAL_TEMPERATURE_SETPOINT_HEATER_OUT = PHYSICAL_TEMPERATURE_SETPOINT_HEATER | OUT,
	PHYSICAL_TEMPERATURE_SETPOINT_HEATER_CMD_IN = PHYSICAL_TEMPERATURE_SETPOINT_HEATER_IN | CMD,
	PHYSICAL_TEMPERATURE_SETPOINT_HEATER_CMD_OUT = PHYSICAL_TEMPERATURE_SETPOINT_HEATER_OUT | CMD,
	// heating setpoint for oven (100oC - 400oC)
	PHYSICAL_TEMPERATURE_SETPOINT_OVEN = PHYSICAL_TEMPERATURE_SETPOINT | 5 << 0,
	PHYSICAL_TEMPERATURE_SETPOINT_OVEN_IN = PHYSICAL_TEMPERATURE_SETPOINT_OVEN | IN,
	PHYSICAL_TEMPERATURE_SETPOINT_OVEN_OUT = PHYSICAL_TEMPERATURE_SETPOINT_OVEN | OUT,
	PHYSICAL_TEMPERATURE_SETPOINT_OVEN_CMD_IN = PHYSICAL_TEMPERATURE_SETPOINT_OVEN_IN | CMD,
	PHYSICAL_TEMPERATURE_SETPOINT_OVEN_CMD_OUT = PHYSICAL_TEMPERATURE_SETPOINT_OVEN_OUT | CMD,
	// pressure in Pascal (displayed as hPa or kPa)
	PHYSICAL_PRESSURE = PHYSICAL | 2 << 5,
	PHYSICAL_PRESSURE_IN = PHYSICAL_PRESSURE | IN,
	PHYSICAL_PRESSURE_OUT = PHYSICAL_PRESSURE | OUT,
	PHYSICAL_PRESSURE_CMD_IN = PHYSICAL_PRESSURE_IN | CMD,
	PHYSICAL_PRESSURE_CMD_OUT = PHYSICAL_PRESSURE_OUT | CMD,
	PHYSICAL_PRESSURE_CATEGORY = 1023 << 3,
	// measured pressure
	PHYSICAL_PRESSURE_MEASURED = PHYSICAL_PRESSURE | 1 << 3,
	PHYSICAL_PRESSURE_MEASURED_IN = PHYSICAL_PRESSURE_MEASURED | IN,
	PHYSICAL_PRESSURE_MEASURED_OUT = PHYSICAL_PRESSURE_MEASURED | OUT,
	PHYSICAL_PRESSURE_MEASURED_CATEGORY = 4095 << 1,
	// measured atmospheric pressure
	PHYSICAL_PRESSURE_MEASURED_ATMOSPHERE = PHYSICAL_PRESSURE_MEASURED | 1 << 1,
	PHYSICAL_PRESSURE_MEASURED_ATMOSPHERE_IN = PHYSICAL_PRESSURE_MEASURED_ATMOSPHERE | IN,
	PHYSICAL_PRESSURE_MEASURED_ATMOSPHERE_OUT = PHYSICAL_PRESSURE_MEASURED_ATMOSPHERE | OUT,
	// pressure setpoint
	PHYSICAL_PRESSURE_SETPOINT = PHYSICAL_PRESSURE | 2 << 3,
	PHYSICAL_PRESSURE_SETPOINT_IN = PHYSICAL_PRESSURE_SETPOINT | IN,
	PHYSICAL_PRESSURE_SETPOINT_OUT = PHYSICAL_PRESSURE_SETPOINT | OUT,
	PHYSICAL_PRESSURE_SETPOINT_CMD_IN = PHYSICAL_PRESSURE_SETPOINT_IN | CMD,
	PHYSICAL_PRESSURE_SETPOINT_CMD_OUT = PHYSICAL_PRESSURE_SETPOINT_OUT | CMD,
	// voltage
	PHYSICAL_VOLTAGE = PHYSICAL | 3 << 5,
	PHYSICAL_VOLTAGE_IN = PHYSICAL_VOLTAGE | IN,
	PHYSICAL_VOLTAGE_OUT = PHYSICAL_VOLTAGE | OUT,
	PHYSICAL_VOLTAGE_CMD_IN = PHYSICAL_VOLTAGE_IN | CMD,
	PHYSICAL_VOLTAGE_CMD_OUT = PHYSICAL_VOLTAGE_OUT | CMD,
	PHYSICAL_VOLTAGE_CATEGORY = 1023 << 3,
	// measured voltage
	PHYSICAL_VOLTAGE_MEASURED = PHYSICAL_VOLTAGE | 1 << 3,
	PHYSICAL_VOLTAGE_MEASURED_IN = PHYSICAL_VOLTAGE_MEASURED | IN,
	PHYSICAL_VOLTAGE_MEASURED_OUT = PHYSICAL_VOLTAGE_MEASURED | OUT,
	PHYSICAL_VOLTAGE_MEASURED_CATEGORY = 8191 << 0,
	// low voltage up to 50V
	PHYSICAL_VOLTAGE_MEASURED_LOW = PHYSICAL_VOLTAGE_MEASURED | 1 << 0,
	PHYSICAL_VOLTAGE_MEASURED_LOW_IN = PHYSICAL_VOLTAGE_MEASURED_LOW | IN,
	PHYSICAL_VOLTAGE_MEASURED_LOW_OUT = PHYSICAL_VOLTAGE_MEASURED_LOW | OUT,
	// mains voltage 110V, 230V, 400V
	PHYSICAL_VOLTAGE_MEASURED_MAINS = PHYSICAL_VOLTAGE_MEASURED | 2 << 0,
	PHYSICAL_VOLTAGE_MEASURED_MAINS_IN = PHYSICAL_VOLTAGE_MEASURED_MAINS | IN,
	PHYSICAL_VOLTAGE_MEASURED_MAINS_OUT = PHYSICAL_VOLTAGE_MEASURED_MAINS | OUT,
	// high voltage
	PHYSICAL_VOLTAGE_MEASURED_HIGH = PHYSICAL_VOLTAGE_MEASURED | 3 << 0,
	PHYSICAL_VOLTAGE_MEASURED_HIGH_IN = PHYSICAL_VOLTAGE_MEASURED_HIGH | IN,
	PHYSICAL_VOLTAGE_MEASURED_HIGH_OUT = PHYSICAL_VOLTAGE_MEASURED_HIGH | OUT,
	// voltage setpoint
	PHYSICAL_VOLTAGE_SETPOINT = PHYSICAL_VOLTAGE | 2 << 3,
	PHYSICAL_VOLTAGE_SETPOINT_IN = PHYSICAL_VOLTAGE_SETPOINT | IN,
	PHYSICAL_VOLTAGE_SETPOINT_OUT = PHYSICAL_VOLTAGE_SETPOINT | OUT,
	PHYSICAL_VOLTAGE_SETPOINT_CMD_IN = PHYSICAL_VOLTAGE_SETPOINT_IN | CMD,
	PHYSICAL_VOLTAGE_SETPOINT_CMD_OUT = PHYSICAL_VOLTAGE_SETPOINT_OUT | CMD,
	// current
	PHYSICAL_CURRENT = PHYSICAL | 4 << 5,
	PHYSICAL_CURRENT_IN = PHYSICAL_CURRENT | IN,
	PHYSICAL_CURRENT_OUT = PHYSICAL_CURRENT | OUT,
	PHYSICAL_CURRENT_CMD_IN = PHYSICAL_CURRENT_IN | CMD,
	PHYSICAL_CURRENT_CMD_OUT = PHYSICAL_CURRENT_OUT | CMD,
	PHYSICAL_CURRENT_CATEGORY = 1023 << 3,
	// measured current
	PHYSICAL_CURRENT_MEASURED = PHYSICAL_CURRENT | 1 << 3,
	PHYSICAL_CURRENT_MEASURED_IN = PHYSICAL_CURRENT_MEASURED | IN,
	PHYSICAL_CURRENT_MEASURED_OUT = PHYSICAL_CURRENT_MEASURED | OUT,
	// current setpoint
	PHYSICAL_CURRENT_SETPOINT = PHYSICAL_CURRENT | 2 << 3,
	PHYSICAL_CURRENT_SETPOINT_IN = PHYSICAL_CURRENT_SETPOINT | IN,
	PHYSICAL_CURRENT_SETPOINT_OUT = PHYSICAL_CURRENT_SETPOINT | OUT,
	PHYSICAL_CURRENT_SETPOINT_CMD_IN = PHYSICAL_CURRENT_SETPOINT_IN | CMD,
	PHYSICAL_CURRENT_SETPOINT_CMD_OUT = PHYSICAL_CURRENT_SETPOINT_OUT | CMD,
	// current
	PHYSICAL_POWER = PHYSICAL | 5 << 5,
	PHYSICAL_POWER_IN = PHYSICAL_POWER | IN,
	PHYSICAL_POWER_OUT = PHYSICAL_POWER | OUT,
	PHYSICAL_POWER_CMD_IN = PHYSICAL_POWER_IN | CMD,
	PHYSICAL_POWER_CMD_OUT = PHYSICAL_POWER_OUT | CMD,
	PHYSICAL_POWER_CATEGORY = 1023 << 3,
	// measured power
	PHYSICAL_POWER_MEASURED = PHYSICAL_POWER | 1 << 3,
	PHYSICAL_POWER_MEASURED_IN = PHYSICAL_POWER_MEASURED | IN,
	PHYSICAL_POWER_MEASURED_OUT = PHYSICAL_POWER_MEASURED | OUT,
	// power setpoint
	PHYSICAL_POWER_SETPOINT = PHYSICAL_POWER | 2 << 3,
	PHYSICAL_POWER_SETPOINT_IN = PHYSICAL_POWER_SETPOINT | IN,
	PHYSICAL_POWER_SETPOINT_OUT = PHYSICAL_POWER_SETPOINT | OUT,
	PHYSICAL_POWER_SETPOINT_CMD_IN = PHYSICAL_POWER_SETPOINT_IN | CMD,
	PHYSICAL_POWER_SETPOINT_CMD_OUT = PHYSICAL_POWER_SETPOINT_OUT | CMD,
	// illumination
	PHYSICAL_ILLUMINATION = PHYSICAL | 6 << 5,
	PHYSICAL_ILLUMINATION_IN = PHYSICAL_ILLUMINATION | IN,
	PHYSICAL_ILLUMINATION_OUT = PHYSICAL_ILLUMINATION | OUT,
	// concentration of substance category (float)
	CONCENTRATION = 5 << 9,
	CONCENTRATION_IN = CONCENTRATION | IN,
	CONCENTRATION_OUT = CONCENTRATION | OUT,
	CONCENTRATION_CMD_IN = CONCENTRATION_IN | CMD,
	CONCENTRATION_CMD_OUT = CONCENTRATION_OUT | CMD,
	CONCENTRATION_CATEGORY = 511 << 4,
	// relative air humidity in percent
	CONCENTRATION_RELATIVE_HUMIDITY = CONCENTRATION | 1 << 4,
	CONCENTRATION_RELATIVE_HUMIDITY_IN = CONCENTRATION_RELATIVE_HUMIDITY | IN,
	CONCENTRATION_RELATIVE_HUMIDITY_OUT = CONCENTRATION_RELATIVE_HUMIDITY | OUT,
	CONCENTRATION_RELATIVE_HUMIDITY_CMD_IN = CONCENTRATION_RELATIVE_HUMIDITY_IN | CMD,
	CONCENTRATION_RELATIVE_HUMIDITY_CMD_OUT = CONCENTRATION_RELATIVE_HUMIDITY_OUT | CMD,
	CONCENTRATION_RELATIVE_HUMIDITY_CATEGORY = 2047 << 2,
	// measured relative air humidity
	CONCENTRATION_RELATIVE_HUMIDITY_MEASURED = CONCENTRATION_RELATIVE_HUMIDITY | 1 << 2,
	CONCENTRATION_RELATIVE_HUMIDITY_MEASURED_IN = CONCENTRATION_RELATIVE_HUMIDITY_MEASURED | IN,
	CONCENTRATION_RELATIVE_HUMIDITY_MEASURED_OUT = CONCENTRATION_RELATIVE_HUMIDITY_MEASURED | OUT,
	CONCENTRATION_RELATIVE_HUMIDITY_MEASURED_CATEGORY = 8191 << 0,
	// low voltage up to 50V
	CONCENTRATION_RELATIVE_HUMIDITY_MEASURED_AIR = CONCENTRATION_RELATIVE_HUMIDITY_MEASURED | 1 << 0,
	CONCENTRATION_RELATIVE_HUMIDITY_MEASURED_AIR_IN = CONCENTRATION_RELATIVE_HUMIDITY_MEASURED_AIR | IN,
	CONCENTRATION_RELATIVE_HUMIDITY_MEASURED_AIR_OUT = CONCENTRATION_RELATIVE_HUMIDITY_MEASURED_AIR | OUT,
	// setpoint relative air humidity
	CONCENTRATION_RELATIVE_HUMIDITY_SETPOINT = CONCENTRATION_RELATIVE_HUMIDITY | 2 << 2,
	CONCENTRATION_RELATIVE_HUMIDITY_SETPOINT_IN = CONCENTRATION_RELATIVE_HUMIDITY_SETPOINT | IN,
	CONCENTRATION_RELATIVE_HUMIDITY_SETPOINT_OUT = CONCENTRATION_RELATIVE_HUMIDITY_SETPOINT | OUT,
	CONCENTRATION_RELATIVE_HUMIDITY_SETPOINT_CMD_IN = CONCENTRATION_RELATIVE_HUMIDITY_SETPOINT_IN | CMD,
	CONCENTRATION_RELATIVE_HUMIDITY_SETPOINT_CMD_OUT = CONCENTRATION_RELATIVE_HUMIDITY_SETPOINT_OUT | CMD,
	// volatile organic components
	CONCENTRATION_VOC = CONCENTRATION | 2 << 4,
	CONCENTRATION_VOC_IN = CONCENTRATION_VOC | IN,
	CONCENTRATION_VOC_OUT = CONCENTRATION_VOC | OUT,
	// carbon monoxide
	CONCENTRATION_CARBON_MONOXIDE = CONCENTRATION | 3 << 4,
	CONCENTRATION_CARBON_MONOXIDE_IN = CONCENTRATION_CARBON_MONOXIDE | IN,
	CONCENTRATION_CARBON_MONOXIDE_OUT = CONCENTRATION_CARBON_MONOXIDE | OUT,
	// carbon dioxide
	CONCENTRATION_CARBON_DIOXIDE = CONCENTRATION | 4 << 4,
	CONCENTRATION_CARBON_DIOXIDE_IN = CONCENTRATION_CARBON_DIOXIDE | IN,
	CONCENTRATION_CARBON_DIOXIDE_OUT = CONCENTRATION_CARBON_DIOXIDE | OUT,
	// lighting category (float, commands include a transition time)
	LIGHTING = 6 << 9,
	LIGHTING_IN = LIGHTING | IN,
	LIGHTING_OUT = LIGHTING | OUT,
	LIGHTING_CMD_IN = LIGHTING_IN | CMD,
	LIGHTING_CMD_OUT = LIGHTING_OUT | CMD,
	LIGHTING_CATEGORY = 255 << 5,
	// light brightness
	LIGHTING_BRIGHTNESS = LIGHTING | 1 << 5,
	LIGHTING_BRIGHTNESS_IN = LIGHTING_BRIGHTNESS | IN,
	LIGHTING_BRIGHTNESS_OUT = LIGHTING_BRIGHTNESS | OUT,
	LIGHTING_BRIGHTNESS_CMD_IN = LIGHTING_BRIGHTNESS_IN | CMD,
	LIGHTING_BRIGHTNESS_CMD_OUT = LIGHTING_BRIGHTNESS_OUT | CMD,
	// color temperature in Kelvin
	LIGHTING_COLOR_TEMPERATURE = LIGHTING | 2 << 5,
	LIGHTING_COLOR_TEMPERATURE_IN = LIGHTING_COLOR_TEMPERATURE | IN,
	LIGHTING_COLOR_TEMPERATURE_OUT = LIGHTING_COLOR_TEMPERATURE | OUT,
	LIGHTING_COLOR_TEMPERATURE_CMD_IN = LIGHTING_COLOR_TEMPERATURE_IN | CMD,
	LIGHTING_COLOR_TEMPERATURE_CMD_OUT = LIGHTING_COLOR_TEMPERATURE_OUT | CMD,
	// color parameter, commands include a transition time
	LIGHTING_COLOR_PARAMETER = LIGHTING | 3 << 5,
	LIGHTING_COLOR_PARAMETER_IN = LIGHTING_COLOR_PARAMETER | IN,
	LIGHTING_COLOR_PARAMETER_OUT = LIGHTING_COLOR_PARAMETER | OUT,
	LIGHTING_COLOR_PARAMETER_CMD_IN = LIGHTING_COLOR_PARAMETER_IN | CMD,
	LIGHTING_COLOR_PARAMETER_CMD_OUT = LIGHTING_COLOR_PARAMETER_OUT | CMD,
	LIGHTING_COLOR_PARAMETER_CATEGORY = 2047 << 2,
	// color chromaticity x (CIE xyY model)
	LIGHTING_COLOR_PARAMETER_CHROMATICITY_X = LIGHTING_COLOR_PARAMETER | 1 << 2,
	LIGHTING_COLOR_PARAMETER_CHROMATICITY_X_IN = LIGHTING_COLOR_PARAMETER_CHROMATICITY_X | IN,
	LIGHTING_COLOR_PARAMETER_CHROMATICITY_X_OUT = LIGHTING_COLOR_PARAMETER_CHROMATICITY_X | OUT,
	LIGHTING_COLOR_PARAMETER_CHROMATICITY_X_CMD_IN = LIGHTING_COLOR_PARAMETER_CHROMATICITY_X_IN | CMD,
	LIGHTING_COLOR_PARAMETER_CHROMATICITY_X_CMD_OUT = LIGHTING_COLOR_PARAMETER_CHROMATICITY_X_OUT | CMD,
	// color chromaticity y (CIE xyY model)
	LIGHTING_COLOR_PARAMETER_CHROMATICITY_Y = LIGHTING_COLOR_PARAMETER | 2 << 2,
	LIGHTING_COLOR_PARAMETER_CHROMATICITY_Y_IN = LIGHTING_COLOR_PARAMETER_CHROMATICITY_Y | IN,
	LIGHTING_COLOR_PARAMETER_CHROMATICITY_Y_OUT = LIGHTING_COLOR_PARAMETER_CHROMATICITY_Y | OUT,
	LIGHTING_COLOR_PARAMETER_CHROMATICITY_Y_CMD_IN = LIGHTING_COLOR_PARAMETER_CHROMATICITY_Y_IN | CMD,
	LIGHTING_COLOR_PARAMETER_CHROMATICITY_Y_CMD_OUT = LIGHTING_COLOR_PARAMETER_CHROMATICITY_Y_OUT | CMD,
	// color hue
	LIGHTING_COLOR_PARAMETER_HUE = LIGHTING_COLOR_PARAMETER | 3 << 2,
	LIGHTING_COLOR_PARAMETER_HUE_IN = LIGHTING_COLOR_PARAMETER_HUE | IN,
	LIGHTING_COLOR_PARAMETER_HUE_OUT = LIGHTING_COLOR_PARAMETER_HUE | OUT,
	LIGHTING_COLOR_PARAMETER_HUE_CMD_IN = LIGHTING_COLOR_PARAMETER_HUE_IN | CMD,
	LIGHTING_COLOR_PARAMETER_HUE_CMD_OUT = LIGHTING_COLOR_PARAMETER_HUE_OUT | CMD,
	// color saturation
	LIGHTING_COLOR_PARAMETER_SATURATION = LIGHTING_COLOR_PARAMETER | 4 << 2,
	LIGHTING_COLOR_PARAMETER_SATURATION_IN = LIGHTING_COLOR_PARAMETER_SATURATION | IN,
	LIGHTING_COLOR_PARAMETER_SATURATION_OUT = LIGHTING_COLOR_PARAMETER_SATURATION | OUT,
	LIGHTING_COLOR_PARAMETER_SATURATION_CMD_IN = LIGHTING_COLOR_PARAMETER_SATURATION_IN | CMD,
	LIGHTING_COLOR_PARAMETER_SATURATION_CMD_OUT = LIGHTING_COLOR_PARAMETER_SATURATION_OUT | CMD,
	// metering of elecricity, water, gas etc. category (int)
	METERING = 7 << 9,
	METERING_IN = METERING | IN,
	METERING_OUT = METERING | OUT,
	METERING_CATEGORY = 255 << 5,
	// electric meter
	METERING_ELECTRIC = METERING | 1 << 5,
	METERING_ELECTRIC_IN = METERING_ELECTRIC | IN,
	METERING_ELECTRIC_OUT = METERING_ELECTRIC | OUT,
	METERING_ELECTRIC_CATEGORY = 1023 << 3,
	// usage (OBIS 1.8.0)
	METERING_ELECTRIC_USAGE = METERING_ELECTRIC | 1 << 3,
	METERING_ELECTRIC_USAGE_IN = METERING_ELECTRIC_USAGE | IN,
	METERING_ELECTRIC_USAGE_OUT = METERING_ELECTRIC_USAGE | OUT,
	METERING_ELECTRIC_USAGE_CATEGORY = 4095 << 1,
	// usage during peak hours (OBIS 1.8.1)
	METERING_ELECTRIC_USAGE_PEAK = METERING_ELECTRIC_USAGE | 1 << 1,
	METERING_ELECTRIC_USAGE_PEAK_IN = METERING_ELECTRIC_USAGE_PEAK | IN,
	METERING_ELECTRIC_USAGE_PEAK_OUT = METERING_ELECTRIC_USAGE_PEAK | OUT,
	// usage during off peak hours (OBIS 1.8.2)
	METERING_ELECTRIC_USAGE_OFF_PEAK = METERING_ELECTRIC_USAGE | 2 << 1,
	METERING_ELECTRIC_USAGE_OFF_PEAK_IN = METERING_ELECTRIC_USAGE_OFF_PEAK | IN,
	METERING_ELECTRIC_USAGE_OFF_PEAK_OUT = METERING_ELECTRIC_USAGE_OFF_PEAK | OUT,
	// supply (OBIS 2.8.0)
	METERING_ELECTRIC_SUPPLY = METERING_ELECTRIC | 2 << 3,
	METERING_ELECTRIC_SUPPLY_IN = METERING_ELECTRIC_SUPPLY | IN,
	METERING_ELECTRIC_SUPPLY_OUT = METERING_ELECTRIC_SUPPLY | OUT,
	METERING_ELECTRIC_SUPPLY_CATEGORY = 4095 << 1,
	// supply during peak hours (OBIS 2.8.1)
	METERING_ELECTRIC_SUPPLY_PEAK = METERING_ELECTRIC_SUPPLY | 1 << 1,
	METERING_ELECTRIC_SUPPLY_PEAK_IN = METERING_ELECTRIC_SUPPLY_PEAK | IN,
	METERING_ELECTRIC_SUPPLY_PEAK_OUT = METERING_ELECTRIC_SUPPLY_PEAK | OUT,
	// supply during off-peak hours (OBIS 2.8.2)
	METERING_ELECTRIC_SUPPLY_OFF_PEAK = METERING_ELECTRIC_SUPPLY | 2 << 1,
	METERING_ELECTRIC_SUPPLY_OFF_PEAK_IN = METERING_ELECTRIC_SUPPLY_OFF_PEAK | IN,
	METERING_ELECTRIC_SUPPLY_OFF_PEAK_OUT = METERING_ELECTRIC_SUPPLY_OFF_PEAK | OUT,
	// water meter
	METERING_WATER = METERING | 2 << 5,
	METERING_WATER_IN = METERING_WATER | IN,
	METERING_WATER_OUT = METERING_WATER | OUT,
	// gas meter
	METERING_GAS = METERING | 3 << 5,
	METERING_GAS_IN = METERING_GAS | IN,
	METERING_GAS_OUT = METERING_GAS | OUT,
};
FLAGS_ENUM(EndpointType2)


enum class EndpointType : uint8_t {
	TYPE_MASK = 0x3f,
	DIRECTION_MASK = 0xc0,

	// direction relative to device, i.e. IN is device input, OUT is device output (can be subscribed to)
	IN = 0x80,
	OUT = 0x40,

	// endpoint types
	// --------------
	UNKNOWN = 0,

	// current binary state (0: off, 1: on)
	OFF_ON = 0x01,
	OFF_ON_IN = OFF_ON | IN,
	OFF_ON_OUT = OFF_ON | OUT,

	// set binary state with toggle command (0: off, 1: on, 2: toggle)
	OFF_ON_TOGGLE = 0x02,
	OFF_ON_TOGGLE_IN = OFF_ON_TOGGLE | IN,
	OFF_ON_TOGGLE_OUT = OFF_ON_TOGGLE | OUT,

	// trigger (button, motion detector), returns to inactive state when released (0: release, 1: trigger)
	TRIGGER = 0x03,
	TRIGGER_IN = TRIGGER | IN,
	TRIGGER_OUT = TRIGGER | OUT,

	// up/down (rocker, blind), returns to inactive state when released (0: release, 1: up, 2: down)
	UP_DOWN = 0x04,
	UP_DOWN_IN = UP_DOWN | IN,
	UP_DOWN_OUT = UP_DOWN | OUT,

	// open/close (window) (0: open, 1: close)
	OPEN_CLOSE = 0x05,
	OPEN_CLOSE_IN = OPEN_CLOSE | IN,
	OPEN_CLOSE_OUT = OPEN_CLOSE | OUT,


	// level, color etc.
	// -----------------
	
	// current level (e.g position of blind)
	LEVEL = 0x10,
	LEVEL_IN = LEVEL | IN,
	LEVEL_OUT = LEVEL | OUT,

	// set level with relative commands (e.g. brightness of a light bulb)
	SET_LEVEL = 0x11,
	SET_LEVEL_IN = SET_LEVEL | IN,
	SET_LEVEL_OUT = SET_LEVEL | OUT,

	// set level with duration (e.g. brightness of a light bulb)
	MOVE_TO_LEVEL = 0x12,
	MOVE_TO_LEVEL_IN = MOVE_TO_LEVEL | IN,
	MOVE_TO_LEVEL_OUT = MOVE_TO_LEVEL | OUT,

	// current color
	COLOR = 0x13,
	COLOR_IN = COLOR | IN,
	COLOR_OUT = COLOR | OUT,

	// set color with relative commands
	SET_COLOR = 0x14,
	SET_COLOR_IN = SET_COLOR | IN,
	SET_COLOR_OUT = SET_COLOR | OUT,

	// current color temperature
	COLOR_TEMPERATURE = 0x16,
	COLOR_TEMPERATURE_IN = COLOR | IN,
	COLOR_TEMPERATURE_OUT = COLOR | OUT,

	// set color temperature with relative commands
	SET_COLOR_TEMPERATURE = 0x17,
	SET_COLOR_TEMPERATURE_IN = SET_COLOR | IN,
	SET_COLOR_TEMPERATURE_OUT = SET_COLOR | OUT,


	// environment
	// -----------
	
	// current air temperature (1/20 Kelvin, displayed in Celsius or Fahrenheit dependent on user setting)
	AIR_TEMPERATURE = 0x20,
	AIR_TEMPERATURE_IN = AIR_TEMPERATURE | IN,
	AIR_TEMPERATURE_OUT = AIR_TEMPERATURE | OUT,

	// set temperature with relative commands
	SET_AIR_TEMPERATURE = 0x21,
	SET_AIR_TEMPERATURE_IN = SET_AIR_TEMPERATURE | IN,
	SET_AIR_TEMPERATURE_OUT = SET_AIR_TEMPERATURE | OUT,

	// current air humidity (percent)
	AIR_HUMIDITY = 0x22,
	AIR_HUMIDITY_IN = AIR_HUMIDITY | IN,
	AIR_HUMIDITY_OUT = AIR_HUMIDITY | OUT,

	// set air humidity with relative commands (percent)
	SET_AIR_HUMIDITY = 0x23,
	SET_AIR_HUMIDITY_IN = SET_AIR_HUMIDITY | IN,
	SET_AIR_HUMIDITY_OUT = SET_AIR_HUMIDITY | OUT,

	// current air pressure (Pascal, displayed in hectopascal, kilopascal or megapascal dependent on user setting)
	AIR_PRESSURE = 0x24,
	AIR_PRESSURE_IN = AIR_PRESSURE | IN,
	AIR_PRESSURE_OUT = AIR_PRESSURE | OUT,

	// current air volatile organic components
	AIR_VOC = 0x25,
	AIR_VOC_IN = AIR_VOC | IN,
	AIR_VOC_OUT = AIR_VOC | OUT,

	// current illuminance (lux, https://en.wikipedia.org/wiki/Lux)
	ILLUMINANCE = 0x26,
	ILLUMINANCE_IN = ILLUMINANCE | IN,
	ILLUMINANCE_OUT = ILLUMINANCE | OUT,

	
	// electrical energy
	// -----------------
	
	// voltage (V, mV)
	VOLTAGE = 0x30,
	VOLTAGE_IN = VOLTAGE | IN,
	VOLTAGE_OUT = VOLTAGE | OUT,

	// current (A, mA)
	CURRENT = 0x31,
	CURRENT_IN = CURRENT | IN,
	CURRENT_OUT = CURRENT | OUT,

	// battery level (percent)
	BATTERY_LEVEL = 0x32,
	BATTERY_LEVEL_IN = BATTERY_LEVEL | IN,
	BATTERY_LEVEL_OUT = BATTERY_LEVEL | OUT,

	// energy counter (kWh, Wh)
	ENERGY_COUNTER = 0x33,
	ENERGY_COUNTER_IN = ENERGY_COUNTER | IN,
	ENERGY_COUNTER_OUT = ENERGY_COUNTER | OUT,

	// energy (W, mW)
	POWER = 0x34,
	POWER_IN = POWER | IN,
	POWER_OUT = POWER | OUT,
};
FLAGS_ENUM(EndpointType);



enum class LevelControlCommand : uint8_t {
	// command
	SET = 0,
	INCREASE = 1,
	DECREASE = 2,
	COMMAND_MASK = 3,
	
	// time mode
	DURATION = 0x4,
	SPEED = 0x8,
	MODE_MASK = 0xc,
};
FLAGS_ENUM(LevelControlCommand);




class MessageReader : public DecryptReader {
public:
	MessageReader(int length, uint8_t *data) : DecryptReader(length, data) {}

	/**
	 * Read a value from 0 to 8 from bus arbitration, i.e. multiple devices can write at the same time and the
	 * lowest value survives
	 * @return value
	 */
	uint8_t arbiter();

	/**
	 * Read an encoded device id
	 * @return device id
	 */
	uint32_t id();
};

class MessageWriter : public EncryptWriter {
public:
	template <int N>
	MessageWriter(uint8_t (&message)[N]) : EncryptWriter(message)
#ifdef EMU
		, end(message + N)
#endif
	{}

	MessageWriter(int length, uint8_t *message) : EncryptWriter(message)
#ifdef EMU
		, end(message + length)
#endif
	{}

	/**
	 * Write a value from 0 to 8 for bus arbitration, i.e. multiple devices can write at the same time and the
	 * lowest value survives
	 * @param value value in range 0 to 8 to write
	 */
	void arbiter(uint8_t value) {
		u8(~(0xff >> value));
	}

	/**
	 * Write an encoded device id
	 * @param id device id to encode
	 */
	void id(uint32_t id);

	int getLength() {
		int length = int(this->current - this->begin);
#ifdef EMU
		assert(this->current <= this->end);
#endif
		return length;
	}

#ifdef EMU
	uint8_t *end;
#endif
};

} // namespace bus
