#include "bus.hpp"


namespace bus {

uint8_t const defaultKey[16] = {0x13, 0x37, 0xc6, 0xb3, 0xf1, 0x6c, 0x7c, 0xb6, 0x2d, 0xec, 0x18, 0x2d, 0x30, 0x78, 0xd6, 0x18};
// generated by main function of sniffer
AesKey const defaultAesKey = {{0x1337c6b3, 0xf16c7cb6, 0x2dec182d, 0x3078d618, 0xaec16bb7, 0x5fad1701, 0x72410f2c, 0x4239d934, 0xbef4739b, 0xe159649a, 0x93186bb6, 0xd121b282, 0x47c360a5, 0xa69a043f, 0x35826f89, 0xe4a3dd0b, 0x45024bcc, 0xe3984ff3, 0xd61a207a, 0x32b9fd71, 0x0356e8ef, 0xe0cea71c, 0x36d48766, 0x046d7a17, 0x1f8c181d, 0xff42bf01, 0xc9963867, 0xcdfb4270, 0x50a049a0, 0xafe2f6a1, 0x6674cec6, 0xab8f8cb6, 0xa3c407c2, 0x0c26f163, 0x6a523fa5, 0xc1ddb313, 0x79a97aba, 0x758f8bd9, 0x1fddb47c, 0xde00076f, 0x2c6cd2a7, 0x59e3597e, 0x463eed02, 0x983eea6d}};


// MessageReader

uint8_t MessageReader::arbiter() {
	uint8_t value = u8();

	uint8_t count = 0;
	while (value > 0) {
		++count;
		value <<= 1;
	}
	return count;
}

uint32_t MessageReader::id() {
	uint32_t id = 0;
	for (int i = 0; i < 11; ++i) {
		id |= (arbiter() - 1) << i * 3;
	}
	return id;
}


// MessageWriter

void MessageWriter::id(uint32_t id) {
	for (int i = 0; i < 11; ++i) {
		arbiter((id & 7) + 1);
		id >>= 3;
	}
}

} // namespace bus
